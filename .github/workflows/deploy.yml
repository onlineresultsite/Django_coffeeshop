# name: Deploy Django to EC2

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.8'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       - name: Install AWS CLI
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y awscli

#       - name: Add SSH key
#         uses: webfactory/ssh-agent@v0.5.3
#         with:
#           ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

#       - name: Sync files to EC2
#         env:
#           EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
#           EC2_USER: ${{ secrets.EC2_USER }}
#         run: |
#           scp -o StrictHostKeyChecking=no -r * $EC2_USER@$EC2_PUBLIC_IP:/home/ubuntu/webemp

#       - name: SSH to EC2 and Deploy
#         env:
#           EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
#           EC2_USER: ${{ secrets.EC2_USER }}
#         run: |
#           ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_PUBLIC_IP << 'EOF'
#             cd /home/ubuntu/webemp
            
#             # Ensure Python venv and install dependencies
#             source venv/bin/activate
#             pip install --upgrade pip
#             pip install -r requirements.txt
            
#             # Run Django management commands

#             python manage.py collectstatic --noinput
#             python manage.py makemigrations

#             python manage.py migrate
            
#             # Restart Gunicorn and Nginx (if applicable)
#             sudo systemctl restart gunicorn
#             sudo systemctl restart nginx
            
#             deactivate  # Deactivate virtual environment

            # cd /home/ubuntu/Searchable-Product-Filter
            # git pull
            # echo "git pull success for Searchable-product repo"
            # # source /venv/bin/activate
            # #npm stop
            # #npm start

            # cd /home/ubuntu/nodejs-backend-architecture-typescript
            # git pull
            # echo "git pull success for nodejs-backend repo"
            # # source /venv/bin/activate
            # #npm stop
            # #npm start
#           EOF


# name: Deploy Django to EC2

# on:
#   push:
#     branches:
#       - main
#   repository_dispatch:
#     types:  # Define the types of events to trigger on
#       - deploy-django  # This should match the event-type in the trigger workflow step

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.8'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       - name: Install AWS CLI
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y awscli

#       - name: Add SSH key
#         uses: webfactory/ssh-agent@v0.5.3
#         with:
#           ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

#       - name: Sync files to EC2
#         env:
#           EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
#           EC2_USER: ${{ secrets.EC2_USER }}
#         run: |
#           scp -o StrictHostKeyChecking=no -r * $EC2_USER@$EC2_PUBLIC_IP:/home/ubuntu/webemp

#       - name: SSH to EC2 and Deploy
#         env:
#           EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
#           EC2_USER: ${{ secrets.EC2_USER }}
#         run: |
#           ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_PUBLIC_IP << 'EOF'
#             cd /home/ubuntu/webemp
            
#             # Ensure Python venv and install dependencies
#             source venv/bin/activate
#             pip install --upgrade pip
#             pip install -r requirements.txt
            
#             # Run Django management commands
#             python manage.py collectstatic --noinput
#             python manage.py makemigrations
#             python manage.py migrate
            
#             # Restart Gunicorn and Nginx (if applicable)
#             sudo systemctl restart gunicorn
#             sudo systemctl restart nginx
            
#             deactivate  # Deactivate virtual environment
            
#             # Additional commands as needed after deployment

#             cd /home/ubuntu/Searchable-Product-Filter
#             git pull
#             echo "git pull success for Searchable-product repo"
#             # source /venv/bin/activate
#             #npm stop
#             #npm start

#             cd /home/ubuntu/nodejs-backend-architecture-typescript
#             git pull
#             echo "git pull success for nodejs-backend repo"
#             # source /venv/bin/activate
#             #npm stop
#             #npm start
#           EOF



name: Deploy Django to EC2

on:
  push:
    branches:
      - main
  repository_dispatch:
    types:
      - deploy-django  # Event type triggered from another repository

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: Check if another deployment is running
        id: check_another_deployment
        run: |
          response=$(curl -s -X GET \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?event=deploy-django&status=in_progress")
          echo "Response from API:"
          echo "$response"
          echo "::set-output name=data::$response"

      - name: Cancel existing deployment if running
        if: steps.check_another_deployment.outputs.data != '[]'
        run: |
          echo "Canceling the existing Django_coffeeshop workflow..."
          run_id=$(echo "${{ steps.check_another_deployment.outputs.data }}" | jq -r '.workflow_runs[0].id')
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id/cancel"

      - name: Sync files to EC2
        env:
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          scp -o StrictHostKeyChecking=no -r * $EC2_USER@$EC2_PUBLIC_IP:/home/ubuntu/webemp

      - name: SSH to EC2 and Deploy
        env:
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_PUBLIC_IP << 'EOF'
            cd /home/ubuntu/webemp
            
            # Ensure Python venv and install dependencies
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Run Django management commands
            python manage.py collectstatic --noinput
            python manage.py makemigrations
            python manage.py migrate
            
            # Restart Gunicorn and Nginx (if applicable)
            sudo systemctl restart gunicorn
            sudo systemctl restart nginx
            
            deactivate  # Deactivate virtual environment
            
            # Additional commands as needed after deployment

            cd /home/ubuntu/Searchable-Product-Filter
            git pull
            echo "git pull success for Searchable-product repo"
            # source /venv/bin/activate
            #npm stop
            #npm start

            cd /home/ubuntu/nodejs-backend-architecture-typescript
            git pull
            echo "git pull success for nodejs-backend repo"
            # source /venv/bin/activate
            #npm stop
            #npm start
          EOF
